---
title: "Getting started with Python (Quarto and Shiny)"
date: today
author:
  name: Lisa Anders
  email: lisa.anders@posit.co 
lightbox: true
format:
  html:
    anchor-sections: true
    smooth-scroll: true
    embed-resources: true
    theme:
      light: flatly
      dark: darkly
    toc: true
editor: visual
jupyter: python3
---

## Why code based analytics? Because it's awesome!

Code based analytics makes your life so much easier as a developer.

Analytics as code lets you:

-   Leverage the best of what the open source community is making
-   Control everything that is displayed, no more pixel paranoia
-   Version control for backups and collaboration
-   Write [tests](https://docs.python.org/3/library/unittest.html#module-unittest) to ensure performance
-   Reproduceability by auditing the package environment with [uv](https://github.com/astral-sh/uv) or [venv](https://docs.posit.co/connect/admin/python/package-management/index.html)

<center>

![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/c7e0e26c-5ca7-49f1-ba8d-093b1f8e541d.png?h=a790567e29efb477a6b7fd4197c514d7){width="80%"}

::: {.citation style="font-size: 16px"}
"Artwork from "Hello, Quarto" keynote by Julia Lowndes and Mine Çetinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by [Allison Horst](https://allisonhorst.com/cetinkaya-rundel-lowndes-quarto-keynote)
:::

</center>

## Getting started with Python

The [Python Software Foundation](https://www.python.org/) has developed many good resources for starting with learning Python:

- The recommended starting place is with the [tutorial](https://docs.python.org/3/tutorial/index.html#tutorial-index).
- You could also view the [Beginner’s Guide to Python](https://wiki.python.org/moin/BeginnersGuide).
- Other training resources are listed at [Getting Started](https://www.python.org/about/gettingstarted/). You can find many resources developed for different backgrounds ranging from expert programmers to those without programming experience, and even some developed for young children.
- There is an extensive list of [books written on various Python topics](https://wiki.python.org/moin/PythonBooks).
- The [r/learnpython](https://www.reddit.com/r/learnpython/) Reddit maintains an [extensive wiki](https://www.reddit.com/r/learnpython/wiki/index/) for resources for getting started with Python.

## Getting started with Quarto

<!-- ![](https://raw.githubusercontent.com/rstudio/hex-stickers/ce526bb5880f348c6970f44f9d8001eb504c4cf6/SVG/quarto.svg){width="25%"} -->

### What is Quarto?

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see: <https://quarto.org>.

-   Check out examples in the [gallery](https://quarto.org/docs/gallery/).

-   Check out the [awesome list](https://github.com/mcanouil/awesome-quarto).

### Running Code in Quarto

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{python}
1 + 1
```

You can add options to executable code like this

```{python}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

For a demonstration of a line plot on a polar axis, see @fig-polar.

```{python}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

### Re-use branding / theme-ing

Quarto templates: <https://quarto.org/docs/extensions/starter-templates.html>

## Loading packages

Build on what the open source community has created by using community built packages.

Load packages into your library with:

```{python}
#| warning: false
import numpy as np
import matplotlib.pyplot as plt
```

## Connecting to data

Connecting to data can either be pre-configured by an admin, or done manually by putting in the connection string.

For example, for connecting to a data source like `mysql` you could use:

```python
import mysql.connector

mydb = mysql.connector.connect(
    host = "localhost",
    user = "yourusername",
    password = "your_password"
)
```

or for a `postgres` datasource: 

```python
import psycopg2

conn = psycopg2.connect(
    dbname="name",
    user="postgres",
    password="your_password",
    host="localhost"
)
```

Reference and useful website with examples for other data types: <https://solutions.posit.co/connections/db/databases/>

#### Opening data from excel

Create a workbook

```{python}
from openpyxl import Workbook

workbook = Workbook()
sheet = workbook.active

sheet["A1"] = "hello"
sheet["B1"] = "world!"

workbook.save(filename="hello_world.xlsx")
```

Load a Workbook

```{python}
from openpyxl import load_workbook
workbook = load_workbook(filename="hello_world.xlsx")
```

Reference: <https://realpython.com/openpyxl-excel-spreadsheets-python/>

### Displaying data

::: panel-tabset
#### DT with download

Or use it to give your users the ability to download the data by copying it to their clipboard:

#### great_tables with formatting

Use a package like great_tables to do something cool, like preview data with coloring and formatting:

```{python}
#| warning: false

import numpy 
import pandas
import great_tables as gt
from great_tables.data import sp500

# Define the start and end dates for the data range
start_date = "2010-06-07"
end_date = "2010-06-14"

# Filter sp500 using Pandas to dates between `start_date` and `end_date`
sp500_mini = sp500[(sp500["date"] >= start_date) & (sp500["date"] <= end_date)]

# Create a display table based on the `sp500_mini` table data
(
    gt.GT(data=sp500_mini)
    .tab_header(title="S&P 500", subtitle=f"{start_date} to {end_date}")
    .fmt_currency(columns=["open", "high", "low", "close"])
    .fmt_date(columns="date", date_style="wd_m_day_year")
    .fmt_number(columns="volume", compact=True)
    .cols_hide(columns="adj_close")
)

```

:::

### "Pin" that data so others can access it, or to speed up apps

Pin your dataset to the Connect server:

```{r}
board <- board_connect(auth = "envvar")

board %>% pin_write(iris, "lisa.anders/iris_dataset", type = "rds", force_identical_write = TRUE)
```

Read it back with:

``` r
board <- board_connect(auth = "envvar")

iris_data_back <-board %>% pin_read("lisa.anders/iris_dataset")
```

When deployed to Connect, an API key will be automatically added into the environment.

[Pin package](https://pins.rstudio.com/)

### Validate data

Check your data for errors or inconsistencies with the [pointblank package](https://rstudio.github.io/pointblank/)

## Creating visualizations

Create visualizations using the most popular packge, [ggplot2](https://ggplot2.tidyverse.org/)

Make them interactive with [plotly](https://plotly.com/r/)

```{r}
#| echo: false
#| warning: false
#| layout-ncol: 3
#| fig-cap: 
#|   - "Plot 1"
#|   - "Plot 2"
#|   - "Plot 3"

ggplot(data = mtcars, aes(x = hp, y = mpg)) + 
  geom_point() + 
  theme(panel.grid = element_line(color = "#8ccde3",
                                  size = 0.75,
                                  linetype = 2))

df <- economics[economics$date > as.Date("2000-01-01"), ]

ggplot(df, aes(x = date, y = unemploy)) +
  geom_line() +
  stat_valleys(geom = "point", span = 11, color = "red", size = 2) +
  stat_valleys(geom = "label", span = 11, color = "red", angle = 0,
               hjust = -0.1, x.label.fmt = "%Y-%m-%d") +
  stat_valleys(geom = "rug", span = 11, color = "red", sides = "b")


# Dates
start <- "2020-10-01"
end <- "2021-01-01"

# Get the data
symbol <- getSymbols("^GSPC", 
           from = start, to = end,
           src = "yahoo",
           warnings = FALSE) 

# Plot the data
chartSeries(GSPC,
            theme = chartTheme("white"),
            name = "SP500",  
            TA = list("addBBands(n = 10)",
                      "addVo()",
                      "addEMA(20)",
                      "addEMA(10, col = 2)"))
```

Amazing resource for creating different types of plots [here](https://r-graph-gallery.com/)

## Make LLM's

<center>![](https://i1.wp.com/www.business-science.io/assets/080_chattr_diagram.jpg?w=578&ssl=1){width="80%"}</center>

Make large language models with [chattr](https://mlverse.github.io/chattr/)

We can even use that model inside your editor to provide coding assistance: <https://blogs.rstudio.com/ai/posts/2024-04-04-chat-with-llms-using-chattr/>

``` r
# Add your API Keys, as needed
key=Sys.getenv("OPENAI_API_KEY")
host=Sys.getenv("DATABRICKS_HOST")
token=Sys.getenv("DATABRICKS_TOKEN")

# Set configs
chattr::chattr_defaults(max_data_files = 0)

# Select an existing LLM, or create your own
chattr_use("gpt4")
chattr_use("gpt35")
chattr_use(
  "llamagpt",   
  path = "[path to compiled program]",
  model = "[path to model]"
  )
chattr_use("databricks-meta-llama3-70b")

# To see what chattr will send to the model, set the preview argument to TRUE
chattr(preview = TRUE)

# Ask the LLM a question
chattr("how do I remove the legend from a ggplot?")

# Run the app
chattr::chattr_app()

# Test the connection 
chattr_test()
```

<center>

::: {.citation style="font-size: 16px"}
Image from r-bloggers article ["How to Get ChatGPT in R with chattr"](https://www.r-bloggers.com/2024/05/how-to-get-chatgpt-in-r-with-chattr/)
:::

</center>

## Make ML models

<center>![](https://vetiver.posit.co/images/ml_ops_cycle.png){width="80%"}</center>

Make Machine Learning models with [vetiver](https://rstudio.github.io/vetiver-python/)

Example: [Bike predict](https://solutions.posit.co/gallery/bike_predict/index.html)

<center>

::: {.citation style="font-size: 16px"}
Image from [vetiver package](https://rstudio.github.io/vetiver-python/)
:::

</center>

## Make an interactive application with Shiny

<!-- ![](https://rstudio.github.io/shiny/reference/figures/logo.png){width="25%"} -->

Make interactive applications that will give each visitor a personalized experience using [shiny](https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/index.html).

Low code option: [shinyuieditor](shinyuieditor)

Examples in the Shiny Gallery: <https://shiny.posit.co/python/gallery/>

### Re-use branding / theme-ing

Shinythemes: <https://rstudio.github.io/shinythemes/>

## End-to-end example: Ferryland

Ferryland git repo with workshop materials: <https://github.com/posit-conf-2024/ds-workflows-python>

Ferryland [deployed materials](https://pub.current.posit.team/ferries-overview/) and [deployed materials publisher's page](https://pub.current.posit.team/connect/#/apps/f6b2cd8d-5bd7-42ba-82cb-c25078918043/access/57) (currently only available to Posit employees).
